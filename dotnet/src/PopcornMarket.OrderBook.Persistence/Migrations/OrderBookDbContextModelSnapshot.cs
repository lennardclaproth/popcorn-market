// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PopcornMarket.OrderBook.Persistence.Context;

#nullable disable

namespace PopcornMarket.OrderBook.Persistence.Migrations
{
    [DbContext(typeof(OrderBookDbContext))]
    partial class OrderBookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.BuyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UUID");

                    b.Property<Guid>("OrderBookId")
                        .HasColumnType("UUID");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("NUMERIC(18,6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("TraderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderBookId");

                    b.HasIndex("Timestamp");

                    b.ToTable("BuyOrder", "OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockPriceUSD")
                        .HasPrecision(18, 6)
                        .HasColumnType("NUMERIC(18,6)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Company", "OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.OrderBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Ticker");

                    b.ToTable("OrderBook", "OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.SellOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UUID");

                    b.Property<Guid>("OrderBookId")
                        .HasColumnType("UUID");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("NUMERIC(18,6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("TraderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderBookId");

                    b.HasIndex("Timestamp");

                    b.ToTable("SellOrder", "OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.BuyOrder", b =>
                {
                    b.HasOne("PopcornMarket.OrderBook.Domain.Entities.OrderBook", "OrderBook")
                        .WithMany("BuyOrders")
                        .HasForeignKey("OrderBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.SellOrder", b =>
                {
                    b.HasOne("PopcornMarket.OrderBook.Domain.Entities.OrderBook", "OrderBook")
                        .WithMany("SellOrders")
                        .HasForeignKey("OrderBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderBook");
                });

            modelBuilder.Entity("PopcornMarket.OrderBook.Domain.Entities.OrderBook", b =>
                {
                    b.Navigation("BuyOrders");

                    b.Navigation("SellOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
